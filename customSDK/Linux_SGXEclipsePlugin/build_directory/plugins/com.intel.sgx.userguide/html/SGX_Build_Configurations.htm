<!--------------------------------------------------------------------------->
<!-- Copyright (c) 2016 Intel Corporation.				   -->
<!-- 									   -->
<!-- All rights reserved. This program and the accompanying materials	   -->
<!-- are made available under the terms of the Eclipse Public License v1.0 -->
<!-- which accompanies this distribution, and is available at		   -->
<!-- http://www.eclipse.org/legal/epl-v10.html				   -->
<!-- 									   -->
<!-- Contributors:							   -->
<!--     Intel Corporation - initial implementation and documentation	   -->
<!--------------------------------------------------------------------------->
<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="5" MadCap:lastHeight="2892" MadCap:lastWidth="554">
    <head><title>SGX Build Configurations</title>
        <link href="Resources/Stylesheets/intel_css_styles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h2>SGX Build Configurations</h2>
        <p>There are usually two types of builds that a regular non-SGX project defines:</p>
        <ul>
            <li>Debug</li>
            <li>Release</li>
        </ul>
        <p>SGX-enabled projects add to this picture support to build and test SGX-enabled application on non-SGX platforms (or emulator) using simulation libraries. This approach doubles the set of build types, creating four possible combinations.  For these combinations, you need to use different sets of compilation and  linking flags and link different libraries.</p>
        <p>The non-debug hardware build is meant to give production code, so it requires the maximum attention when signed. The Two Steps Sign schema is required for production enclaves, which involves an external signing facility, not part of Intel SGX SDK.  The other configurations are not meant for production but they have to be signed too.  The simplest and more convenient Single Step schema is used for them.</p>
        <p>Again for testing purpose, you might want to experiment with a non-production enclave built with release compilation and linking flags, on a real hardware SGX-enabled platform. That would be an enclave built exactly as a production enclave, except for the sign process which would be Single Step. To support the construction of such enclave, there is a hardware non-debug build configuration dubbed <i>Prerelease</i>.</p>
        <p>So there are five SGX related configurations when SGX Nature is added to a project:</p>
        <p>
            <img src="Resources/Images/Intel_SGX_Configurations.png" />
        </p>
        <p>Intel(R) SGX Configurations</p>
        <p>The following table resumes the existing SGX configurations and relate them with compilation/linking flags (debug/non-debug) and signing scheme (single vs. two steps):</p>
        <p class="tablecap">Intel(R) SGX Configurations</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <th>Configuration Name</th>
                    <th>Simulation?</th>
                    <th>Debug?</th>
                    <th>Signing Schema</th>
                </tr>
                <tr>
                    <td>SGX Hardware Debug</td>
                    <td>Hardware</td>
                    <td>Debug</td>
                    <td>Single Step</td>
                </tr>
                <tr>
                    <td>SGX Hardware Pre-release</td>
                    <td>Hardware</td>
                    <td>Non-debug</td>
                    <td>Single Step</td>
                </tr>
                <tr>
                    <td>SGX Hardware Release</td>
                    <td>Hardware</td>
                    <td>Non-debug</td>
                    <td>Two Step</td>
                </tr>
                <tr>
                    <td>SGX Simulation</td>
                    <td>Simulation</td>
                    <td>Non-debug</td>
                    <td>Single Step</td>
                </tr>
                <tr>
                    <td>SGX Simulation</td>
                    <td>Debug	Simulation</td>
                    <td>Debug</td>
                    <td>Single step</td>
                </tr>
            </tbody>
        </table>
        <p>Intel® Software Guard Extensions Eclipse Plug-in uses standard GNU* make tool to build the trusted and the untrusted code, using the generated file <code>sgx/Makefile</code>.</p>
        <p>This fact does not impose any restriction on the build tool chosen for the hosting project. Intel® Software Guard Extensions Eclipse* Plug-in uses its own build configurations which do not interfere with the configurations that you might have in your project.</p>
        <p>When SGX configurations are selected, by default only code under <code>&lt;root&gt;/sgx</code> directory get built.</p>
        <p>You can customize SGX configurations as any other Eclipse build configurations from the project properties dialog. For example:</p>
        <ol>
            <li>Right-click in Project Explorer Properties → C/C++ Build</li>
            <li>Uncheck the Use default build command checkbox.</li>
        </ol>
        <p>Then you can customize and integrate SGX build process.  You can use Makefile instead of <code>sgx/Makefile</code> in the example shown in the following figure:</p>
        <p>
            <img src="Resources/Images/Customization_of_SGX_build_command.png" />
        </p>
        <p class="figcap">Customization of SGX Build Command			</p>
        <p>The build process is done using standard Eclipse interface for build, by example from the main <b>Project</b> menu:			</p>
        <p>
            <img src="Resources/Images/Project_Menu.png" />
        </p>
        <p class="figcap">Project Menu			</p>
    </body>
</html>
