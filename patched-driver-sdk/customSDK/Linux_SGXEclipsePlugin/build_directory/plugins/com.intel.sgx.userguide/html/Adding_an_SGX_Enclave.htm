<!--------------------------------------------------------------------------->
<!-- Copyright (c) 2016 Intel Corporation.				   -->
<!-- 									   -->
<!-- All rights reserved. This program and the accompanying materials	   -->
<!-- are made available under the terms of the Eclipse Public License v1.0 -->
<!-- which accompanies this distribution, and is available at		   -->
<!-- http://www.eclipse.org/legal/epl-v10.html				   -->
<!-- 									   -->
<!-- Contributors:							   -->
<!--     Intel Corporation - initial implementation and documentation	   -->
<!--------------------------------------------------------------------------->
<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2003" MadCap:lastWidth="524">
    <head><title>Adding an SGX Enclave</title>
        <link href="Resources/Stylesheets/intel_css_styles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h2>Adding an SGX Enclave</h2>
        <p>After you add the SGX nature to a project, you can start creating a minimal but complete skeleton for a new enclave:</p>
        <ol>
            <li>Right-click on the project root in <b>Project Explorer</b>.</li>
            <li>
                <p>Open the dialog <b>Add New SGX Enclave</b> by selecting <b>Software Guard Extensions Tools → Add SGX Enclave</b> from the contextual menu.</p>
                <p>
                    <img src="Resources/Images/Add_New_Intel_SGX_Enclave_Dialog.png" />
                </p>
                <p class="figcap">Add New Intel® SGX Enclave Dialog</p>
            </li>
            <li>
                <p>Choose a name for the enclave in <b>Enclave name</b> field.  This name is used in the process of generation of the skeleton to give unicity to the source files and the name of the resulting executable, so you can add more than one enclave to the same project.</p>
                <ul>
                    <li>
                        <p>If you do not select the <b>Generate sample untrusted application</b> checkbox, the plugin generates only a trusted file and a Makefile fragment to build and compile the trusted part. See the following graphic.   All the code for the enclave, including build Makefile, is put in a directory <code>&lt;root&gt;/sgx/enclave_&lt;name&gt;</code> .   C/C++ code for the enclave proper are in <code>&lt;root&gt;/sgx/enclave_&lt;name&gt;/trusted</code>.</p>
                        <p>
                            <img src="Resources/Images/Generated_Skeleton_for_an_Enclave.png" />
                        </p>
                        <p class="figcap">Generated Skeleton for an Enclave.  The option to Generate Sample was not Used</p>
                    </li>
                    <li>
                        <p>If you select <b>Generate sample untrusted application</b> checkbox, a simple ready to work sample application is generated, including untrusted stubs and implementation for a sample OCALL and ECALL.</p>
                        <p>
                            <img src="Resources/Images/Generated_Sample_Untrusted_Application.png" />
                        </p>
                        <p class="figcap">Generated Sample Untrusted Application</p>
                    </li>
                </ul>
            </li>
        </ol>
        <div class="NoteCont">
            <p class="NoteTipHead">NOTE:</p>
            <p>If you select the <b>Generate sample untrusted application</b> checkbox, ecalls from the untrusted part are not be resolved by Eclipse C/C++ indexer. These functions are marked with a red line. The declaration of these ecalls resides in the unstrusted stub header which is generated during the build proces and is not indexed by Eclipse. To resolve this problem, right-click on project root and select <b>Index → Freshen All Files</b>.</p>
        </div>
    </body>
</html>
